#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define NUM_PHILOSOPHERS 2

pthread_mutex_t forks[NUM_PHILOSOPHERS];

void *philosopher(void *arg)
{
    int id = *(int *)arg;
    int left_fork = id;
    int right_fork = (id + 1) % NUM_PHILOSOPHERS;
    while (1)
    {

        printf("Philosopher %d is thinking...\n", id);
        sleep(rand() % 5);

        pthread_mutex_lock(&forks[left_fork]);
        printf("Philosopher %d picked up the left fork\n", id);

        pthread_mutex_lock(&forks[right_fork]);
        printf("Philosopher %d picked up the right fork\n", id);

        printf("Philosopher %d is eating...\n", id);
        sleep(rand() % 5);

        pthread_mutex_unlock(&forks[right_fork]);
        printf("Philosopher %d put down the right fork\n", id);

        pthread_mutex_unlock(&forks[left_fork]);
        printf("Philosopher %d put down the left fork\n", id);
    }
}

int main()
{
    printf("21BAI1472\n");
    pthread_t philosophers[NUM_PHILOSOPHERS];
    int ids[NUM_PHILOSOPHERS];
    int i;

    for (i = 0; i < NUM_PHILOSOPHERS; i++)
    {
        pthread_mutex_init(&forks[i], NULL);
    }

    for (i = 0; i < NUM_PHILOSOPHERS; i++)
    {
        ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &ids[i]);
    }

    for (i = 0; i < NUM_PHILOSOPHERS; i++)
    {
        pthread_join(philosophers[i], NULL);
    }

    for (i = 0; i < NUM_PHILOSOPHERS; i++)
    {
        pthread_mutex_destroy(&forks[i]);
    }

    return 0;
}

