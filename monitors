#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define BUFFER_SIZE 5

int buffer[BUFFER_SIZE];
int count = 0;

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t not_empty = PTHREAD_COND_INITIALIZER;
pthread_cond_t not_full = PTHREAD_COND_INITIALIZER;

void insert(int item)
{
    pthread_mutex_lock(&mutex);
    while (count == BUFFER_SIZE)
    {
        pthread_cond_wait(&not_full, &mutex);
    }
    buffer[count++] = item;
    printf("Inserted item %d\n", item);
    pthread_cond_signal(&not_empty);
    pthread_mutex_unlock(&mutex);
}

int remove_item()
{
    int item;
    pthread_mutex_lock(&mutex);
    while (count == 0)
    {
        pthread_cond_wait(&not_empty, &mutex);
    }
    item = buffer[--count];
    printf("Removed item %d\n", item);
    pthread_cond_signal(&not_full);
    pthread_mutex_unlock(&mutex);
    return item;
}

void *producer(void *arg)
{
    int i;
    for (i = 1; i <= 20; i++)
    {
        insert(i);
    }
    pthread_exit(NULL);
}

void *consumer(void *arg)
{
    int i;
    for (i = 1; i <= 20; i++)
    {
        remove_item();
    }
    pthread_exit(NULL);
}

int main()
{
    printf("21BAI1472\n");
    pthread_t producer_thread, consumer_thread;

    pthread_create(&producer_thread, NULL, producer, NULL);
    pthread_create(&consumer_thread, NULL, consumer, NULL);

    pthread_join(producer_thread, NULL);
    pthread_join(consumer_thread, NULL);

    return 0;
}

